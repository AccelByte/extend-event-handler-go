// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: IAM/AsyncAPI/rbac.yaml (0.1.0)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: accelbyte-asyncapi/iam/rbac/v1/rbac.proto

package rbac

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoleRoleCreatedServiceClient is the client API for RoleRoleCreatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRoleCreatedServiceClient interface {
	OnMessage(ctx context.Context, in *RoleCreated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleRoleCreatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRoleCreatedServiceClient(cc grpc.ClientConnInterface) RoleRoleCreatedServiceClient {
	return &roleRoleCreatedServiceClient{cc}
}

func (c *roleRoleCreatedServiceClient) OnMessage(ctx context.Context, in *RoleCreated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RoleRoleCreatedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRoleCreatedServiceServer is the server API for RoleRoleCreatedService service.
// All implementations must embed UnimplementedRoleRoleCreatedServiceServer
// for forward compatibility
type RoleRoleCreatedServiceServer interface {
	OnMessage(context.Context, *RoleCreated) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleRoleCreatedServiceServer()
}

// UnimplementedRoleRoleCreatedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRoleCreatedServiceServer struct {
}

func (UnimplementedRoleRoleCreatedServiceServer) OnMessage(context.Context, *RoleCreated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRoleRoleCreatedServiceServer) mustEmbedUnimplementedRoleRoleCreatedServiceServer() {
}

// UnsafeRoleRoleCreatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRoleCreatedServiceServer will
// result in compilation errors.
type UnsafeRoleRoleCreatedServiceServer interface {
	mustEmbedUnimplementedRoleRoleCreatedServiceServer()
}

func RegisterRoleRoleCreatedServiceServer(s grpc.ServiceRegistrar, srv RoleRoleCreatedServiceServer) {
	s.RegisterService(&RoleRoleCreatedService_ServiceDesc, srv)
}

func _RoleRoleCreatedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRoleCreatedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RoleRoleCreatedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRoleCreatedServiceServer).OnMessage(ctx, req.(*RoleCreated))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRoleCreatedService_ServiceDesc is the grpc.ServiceDesc for RoleRoleCreatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRoleCreatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RoleRoleCreatedService",
	HandlerType: (*RoleRoleCreatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RoleRoleCreatedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RoleRoleDeletedServiceClient is the client API for RoleRoleDeletedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRoleDeletedServiceClient interface {
	OnMessage(ctx context.Context, in *RoleDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleRoleDeletedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRoleDeletedServiceClient(cc grpc.ClientConnInterface) RoleRoleDeletedServiceClient {
	return &roleRoleDeletedServiceClient{cc}
}

func (c *roleRoleDeletedServiceClient) OnMessage(ctx context.Context, in *RoleDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RoleRoleDeletedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRoleDeletedServiceServer is the server API for RoleRoleDeletedService service.
// All implementations must embed UnimplementedRoleRoleDeletedServiceServer
// for forward compatibility
type RoleRoleDeletedServiceServer interface {
	OnMessage(context.Context, *RoleDeleted) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleRoleDeletedServiceServer()
}

// UnimplementedRoleRoleDeletedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRoleDeletedServiceServer struct {
}

func (UnimplementedRoleRoleDeletedServiceServer) OnMessage(context.Context, *RoleDeleted) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRoleRoleDeletedServiceServer) mustEmbedUnimplementedRoleRoleDeletedServiceServer() {
}

// UnsafeRoleRoleDeletedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRoleDeletedServiceServer will
// result in compilation errors.
type UnsafeRoleRoleDeletedServiceServer interface {
	mustEmbedUnimplementedRoleRoleDeletedServiceServer()
}

func RegisterRoleRoleDeletedServiceServer(s grpc.ServiceRegistrar, srv RoleRoleDeletedServiceServer) {
	s.RegisterService(&RoleRoleDeletedService_ServiceDesc, srv)
}

func _RoleRoleDeletedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRoleDeletedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RoleRoleDeletedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRoleDeletedServiceServer).OnMessage(ctx, req.(*RoleDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRoleDeletedService_ServiceDesc is the grpc.ServiceDesc for RoleRoleDeletedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRoleDeletedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RoleRoleDeletedService",
	HandlerType: (*RoleRoleDeletedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RoleRoleDeletedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RoleRoleUpdatedServiceClient is the client API for RoleRoleUpdatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleRoleUpdatedServiceClient interface {
	OnMessage(ctx context.Context, in *RoleUpdated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleRoleUpdatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleRoleUpdatedServiceClient(cc grpc.ClientConnInterface) RoleRoleUpdatedServiceClient {
	return &roleRoleUpdatedServiceClient{cc}
}

func (c *roleRoleUpdatedServiceClient) OnMessage(ctx context.Context, in *RoleUpdated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RoleRoleUpdatedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleRoleUpdatedServiceServer is the server API for RoleRoleUpdatedService service.
// All implementations must embed UnimplementedRoleRoleUpdatedServiceServer
// for forward compatibility
type RoleRoleUpdatedServiceServer interface {
	OnMessage(context.Context, *RoleUpdated) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleRoleUpdatedServiceServer()
}

// UnimplementedRoleRoleUpdatedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleRoleUpdatedServiceServer struct {
}

func (UnimplementedRoleRoleUpdatedServiceServer) OnMessage(context.Context, *RoleUpdated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRoleRoleUpdatedServiceServer) mustEmbedUnimplementedRoleRoleUpdatedServiceServer() {
}

// UnsafeRoleRoleUpdatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleRoleUpdatedServiceServer will
// result in compilation errors.
type UnsafeRoleRoleUpdatedServiceServer interface {
	mustEmbedUnimplementedRoleRoleUpdatedServiceServer()
}

func RegisterRoleRoleUpdatedServiceServer(s grpc.ServiceRegistrar, srv RoleRoleUpdatedServiceServer) {
	s.RegisterService(&RoleRoleUpdatedService_ServiceDesc, srv)
}

func _RoleRoleUpdatedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleUpdated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleRoleUpdatedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RoleRoleUpdatedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleRoleUpdatedServiceServer).OnMessage(ctx, req.(*RoleUpdated))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleRoleUpdatedService_ServiceDesc is the grpc.ServiceDesc for RoleRoleUpdatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleRoleUpdatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RoleRoleUpdatedService",
	HandlerType: (*RoleRoleUpdatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RoleRoleUpdatedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RolePermissionsRolePermissionCreatedServiceClient is the client API for RolePermissionsRolePermissionCreatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolePermissionsRolePermissionCreatedServiceClient interface {
	OnMessage(ctx context.Context, in *RolePermissionCreated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rolePermissionsRolePermissionCreatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolePermissionsRolePermissionCreatedServiceClient(cc grpc.ClientConnInterface) RolePermissionsRolePermissionCreatedServiceClient {
	return &rolePermissionsRolePermissionCreatedServiceClient{cc}
}

func (c *rolePermissionsRolePermissionCreatedServiceClient) OnMessage(ctx context.Context, in *RolePermissionCreated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RolePermissionsRolePermissionCreatedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolePermissionsRolePermissionCreatedServiceServer is the server API for RolePermissionsRolePermissionCreatedService service.
// All implementations must embed UnimplementedRolePermissionsRolePermissionCreatedServiceServer
// for forward compatibility
type RolePermissionsRolePermissionCreatedServiceServer interface {
	OnMessage(context.Context, *RolePermissionCreated) (*emptypb.Empty, error)
	mustEmbedUnimplementedRolePermissionsRolePermissionCreatedServiceServer()
}

// UnimplementedRolePermissionsRolePermissionCreatedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolePermissionsRolePermissionCreatedServiceServer struct {
}

func (UnimplementedRolePermissionsRolePermissionCreatedServiceServer) OnMessage(context.Context, *RolePermissionCreated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRolePermissionsRolePermissionCreatedServiceServer) mustEmbedUnimplementedRolePermissionsRolePermissionCreatedServiceServer() {
}

// UnsafeRolePermissionsRolePermissionCreatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolePermissionsRolePermissionCreatedServiceServer will
// result in compilation errors.
type UnsafeRolePermissionsRolePermissionCreatedServiceServer interface {
	mustEmbedUnimplementedRolePermissionsRolePermissionCreatedServiceServer()
}

func RegisterRolePermissionsRolePermissionCreatedServiceServer(s grpc.ServiceRegistrar, srv RolePermissionsRolePermissionCreatedServiceServer) {
	s.RegisterService(&RolePermissionsRolePermissionCreatedService_ServiceDesc, srv)
}

func _RolePermissionsRolePermissionCreatedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsRolePermissionCreatedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RolePermissionsRolePermissionCreatedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsRolePermissionCreatedServiceServer).OnMessage(ctx, req.(*RolePermissionCreated))
	}
	return interceptor(ctx, in, info, handler)
}

// RolePermissionsRolePermissionCreatedService_ServiceDesc is the grpc.ServiceDesc for RolePermissionsRolePermissionCreatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolePermissionsRolePermissionCreatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RolePermissionsRolePermissionCreatedService",
	HandlerType: (*RolePermissionsRolePermissionCreatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RolePermissionsRolePermissionCreatedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RolePermissionsRolePermissionDeletedServiceClient is the client API for RolePermissionsRolePermissionDeletedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolePermissionsRolePermissionDeletedServiceClient interface {
	OnMessage(ctx context.Context, in *RolePermissionDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rolePermissionsRolePermissionDeletedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolePermissionsRolePermissionDeletedServiceClient(cc grpc.ClientConnInterface) RolePermissionsRolePermissionDeletedServiceClient {
	return &rolePermissionsRolePermissionDeletedServiceClient{cc}
}

func (c *rolePermissionsRolePermissionDeletedServiceClient) OnMessage(ctx context.Context, in *RolePermissionDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RolePermissionsRolePermissionDeletedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolePermissionsRolePermissionDeletedServiceServer is the server API for RolePermissionsRolePermissionDeletedService service.
// All implementations must embed UnimplementedRolePermissionsRolePermissionDeletedServiceServer
// for forward compatibility
type RolePermissionsRolePermissionDeletedServiceServer interface {
	OnMessage(context.Context, *RolePermissionDeleted) (*emptypb.Empty, error)
	mustEmbedUnimplementedRolePermissionsRolePermissionDeletedServiceServer()
}

// UnimplementedRolePermissionsRolePermissionDeletedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolePermissionsRolePermissionDeletedServiceServer struct {
}

func (UnimplementedRolePermissionsRolePermissionDeletedServiceServer) OnMessage(context.Context, *RolePermissionDeleted) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRolePermissionsRolePermissionDeletedServiceServer) mustEmbedUnimplementedRolePermissionsRolePermissionDeletedServiceServer() {
}

// UnsafeRolePermissionsRolePermissionDeletedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolePermissionsRolePermissionDeletedServiceServer will
// result in compilation errors.
type UnsafeRolePermissionsRolePermissionDeletedServiceServer interface {
	mustEmbedUnimplementedRolePermissionsRolePermissionDeletedServiceServer()
}

func RegisterRolePermissionsRolePermissionDeletedServiceServer(s grpc.ServiceRegistrar, srv RolePermissionsRolePermissionDeletedServiceServer) {
	s.RegisterService(&RolePermissionsRolePermissionDeletedService_ServiceDesc, srv)
}

func _RolePermissionsRolePermissionDeletedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsRolePermissionDeletedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RolePermissionsRolePermissionDeletedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsRolePermissionDeletedServiceServer).OnMessage(ctx, req.(*RolePermissionDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

// RolePermissionsRolePermissionDeletedService_ServiceDesc is the grpc.ServiceDesc for RolePermissionsRolePermissionDeletedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolePermissionsRolePermissionDeletedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RolePermissionsRolePermissionDeletedService",
	HandlerType: (*RolePermissionsRolePermissionDeletedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RolePermissionsRolePermissionDeletedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RolePermissionsRolePermissionUpdatedServiceClient is the client API for RolePermissionsRolePermissionUpdatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolePermissionsRolePermissionUpdatedServiceClient interface {
	OnMessage(ctx context.Context, in *RolePermissionUpdated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rolePermissionsRolePermissionUpdatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolePermissionsRolePermissionUpdatedServiceClient(cc grpc.ClientConnInterface) RolePermissionsRolePermissionUpdatedServiceClient {
	return &rolePermissionsRolePermissionUpdatedServiceClient{cc}
}

func (c *rolePermissionsRolePermissionUpdatedServiceClient) OnMessage(ctx context.Context, in *RolePermissionUpdated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RolePermissionsRolePermissionUpdatedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolePermissionsRolePermissionUpdatedServiceServer is the server API for RolePermissionsRolePermissionUpdatedService service.
// All implementations must embed UnimplementedRolePermissionsRolePermissionUpdatedServiceServer
// for forward compatibility
type RolePermissionsRolePermissionUpdatedServiceServer interface {
	OnMessage(context.Context, *RolePermissionUpdated) (*emptypb.Empty, error)
	mustEmbedUnimplementedRolePermissionsRolePermissionUpdatedServiceServer()
}

// UnimplementedRolePermissionsRolePermissionUpdatedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRolePermissionsRolePermissionUpdatedServiceServer struct {
}

func (UnimplementedRolePermissionsRolePermissionUpdatedServiceServer) OnMessage(context.Context, *RolePermissionUpdated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRolePermissionsRolePermissionUpdatedServiceServer) mustEmbedUnimplementedRolePermissionsRolePermissionUpdatedServiceServer() {
}

// UnsafeRolePermissionsRolePermissionUpdatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolePermissionsRolePermissionUpdatedServiceServer will
// result in compilation errors.
type UnsafeRolePermissionsRolePermissionUpdatedServiceServer interface {
	mustEmbedUnimplementedRolePermissionsRolePermissionUpdatedServiceServer()
}

func RegisterRolePermissionsRolePermissionUpdatedServiceServer(s grpc.ServiceRegistrar, srv RolePermissionsRolePermissionUpdatedServiceServer) {
	s.RegisterService(&RolePermissionsRolePermissionUpdatedService_ServiceDesc, srv)
}

func _RolePermissionsRolePermissionUpdatedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionUpdated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolePermissionsRolePermissionUpdatedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RolePermissionsRolePermissionUpdatedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolePermissionsRolePermissionUpdatedServiceServer).OnMessage(ctx, req.(*RolePermissionUpdated))
	}
	return interceptor(ctx, in, info, handler)
}

// RolePermissionsRolePermissionUpdatedService_ServiceDesc is the grpc.ServiceDesc for RolePermissionsRolePermissionUpdatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolePermissionsRolePermissionUpdatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RolePermissionsRolePermissionUpdatedService",
	HandlerType: (*RolePermissionsRolePermissionUpdatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RolePermissionsRolePermissionUpdatedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RoleManagerRoleManagerCreatedServiceClient is the client API for RoleManagerRoleManagerCreatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleManagerRoleManagerCreatedServiceClient interface {
	OnMessage(ctx context.Context, in *RoleManagerCreated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleManagerRoleManagerCreatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleManagerRoleManagerCreatedServiceClient(cc grpc.ClientConnInterface) RoleManagerRoleManagerCreatedServiceClient {
	return &roleManagerRoleManagerCreatedServiceClient{cc}
}

func (c *roleManagerRoleManagerCreatedServiceClient) OnMessage(ctx context.Context, in *RoleManagerCreated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RoleManagerRoleManagerCreatedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleManagerRoleManagerCreatedServiceServer is the server API for RoleManagerRoleManagerCreatedService service.
// All implementations must embed UnimplementedRoleManagerRoleManagerCreatedServiceServer
// for forward compatibility
type RoleManagerRoleManagerCreatedServiceServer interface {
	OnMessage(context.Context, *RoleManagerCreated) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleManagerRoleManagerCreatedServiceServer()
}

// UnimplementedRoleManagerRoleManagerCreatedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleManagerRoleManagerCreatedServiceServer struct {
}

func (UnimplementedRoleManagerRoleManagerCreatedServiceServer) OnMessage(context.Context, *RoleManagerCreated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRoleManagerRoleManagerCreatedServiceServer) mustEmbedUnimplementedRoleManagerRoleManagerCreatedServiceServer() {
}

// UnsafeRoleManagerRoleManagerCreatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleManagerRoleManagerCreatedServiceServer will
// result in compilation errors.
type UnsafeRoleManagerRoleManagerCreatedServiceServer interface {
	mustEmbedUnimplementedRoleManagerRoleManagerCreatedServiceServer()
}

func RegisterRoleManagerRoleManagerCreatedServiceServer(s grpc.ServiceRegistrar, srv RoleManagerRoleManagerCreatedServiceServer) {
	s.RegisterService(&RoleManagerRoleManagerCreatedService_ServiceDesc, srv)
}

func _RoleManagerRoleManagerCreatedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleManagerCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerRoleManagerCreatedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RoleManagerRoleManagerCreatedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerRoleManagerCreatedServiceServer).OnMessage(ctx, req.(*RoleManagerCreated))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleManagerRoleManagerCreatedService_ServiceDesc is the grpc.ServiceDesc for RoleManagerRoleManagerCreatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleManagerRoleManagerCreatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RoleManagerRoleManagerCreatedService",
	HandlerType: (*RoleManagerRoleManagerCreatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RoleManagerRoleManagerCreatedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RoleManagerRoleManagerDeletedServiceClient is the client API for RoleManagerRoleManagerDeletedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleManagerRoleManagerDeletedServiceClient interface {
	OnMessage(ctx context.Context, in *RoleManagerDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleManagerRoleManagerDeletedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleManagerRoleManagerDeletedServiceClient(cc grpc.ClientConnInterface) RoleManagerRoleManagerDeletedServiceClient {
	return &roleManagerRoleManagerDeletedServiceClient{cc}
}

func (c *roleManagerRoleManagerDeletedServiceClient) OnMessage(ctx context.Context, in *RoleManagerDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RoleManagerRoleManagerDeletedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleManagerRoleManagerDeletedServiceServer is the server API for RoleManagerRoleManagerDeletedService service.
// All implementations must embed UnimplementedRoleManagerRoleManagerDeletedServiceServer
// for forward compatibility
type RoleManagerRoleManagerDeletedServiceServer interface {
	OnMessage(context.Context, *RoleManagerDeleted) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleManagerRoleManagerDeletedServiceServer()
}

// UnimplementedRoleManagerRoleManagerDeletedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleManagerRoleManagerDeletedServiceServer struct {
}

func (UnimplementedRoleManagerRoleManagerDeletedServiceServer) OnMessage(context.Context, *RoleManagerDeleted) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRoleManagerRoleManagerDeletedServiceServer) mustEmbedUnimplementedRoleManagerRoleManagerDeletedServiceServer() {
}

// UnsafeRoleManagerRoleManagerDeletedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleManagerRoleManagerDeletedServiceServer will
// result in compilation errors.
type UnsafeRoleManagerRoleManagerDeletedServiceServer interface {
	mustEmbedUnimplementedRoleManagerRoleManagerDeletedServiceServer()
}

func RegisterRoleManagerRoleManagerDeletedServiceServer(s grpc.ServiceRegistrar, srv RoleManagerRoleManagerDeletedServiceServer) {
	s.RegisterService(&RoleManagerRoleManagerDeletedService_ServiceDesc, srv)
}

func _RoleManagerRoleManagerDeletedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleManagerDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerRoleManagerDeletedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RoleManagerRoleManagerDeletedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerRoleManagerDeletedServiceServer).OnMessage(ctx, req.(*RoleManagerDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleManagerRoleManagerDeletedService_ServiceDesc is the grpc.ServiceDesc for RoleManagerRoleManagerDeletedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleManagerRoleManagerDeletedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RoleManagerRoleManagerDeletedService",
	HandlerType: (*RoleManagerRoleManagerDeletedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RoleManagerRoleManagerDeletedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RoleMemberRoleMemberCreatedServiceClient is the client API for RoleMemberRoleMemberCreatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleMemberRoleMemberCreatedServiceClient interface {
	OnMessage(ctx context.Context, in *RoleMemberCreated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleMemberRoleMemberCreatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleMemberRoleMemberCreatedServiceClient(cc grpc.ClientConnInterface) RoleMemberRoleMemberCreatedServiceClient {
	return &roleMemberRoleMemberCreatedServiceClient{cc}
}

func (c *roleMemberRoleMemberCreatedServiceClient) OnMessage(ctx context.Context, in *RoleMemberCreated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RoleMemberRoleMemberCreatedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleMemberRoleMemberCreatedServiceServer is the server API for RoleMemberRoleMemberCreatedService service.
// All implementations must embed UnimplementedRoleMemberRoleMemberCreatedServiceServer
// for forward compatibility
type RoleMemberRoleMemberCreatedServiceServer interface {
	OnMessage(context.Context, *RoleMemberCreated) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleMemberRoleMemberCreatedServiceServer()
}

// UnimplementedRoleMemberRoleMemberCreatedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleMemberRoleMemberCreatedServiceServer struct {
}

func (UnimplementedRoleMemberRoleMemberCreatedServiceServer) OnMessage(context.Context, *RoleMemberCreated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRoleMemberRoleMemberCreatedServiceServer) mustEmbedUnimplementedRoleMemberRoleMemberCreatedServiceServer() {
}

// UnsafeRoleMemberRoleMemberCreatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleMemberRoleMemberCreatedServiceServer will
// result in compilation errors.
type UnsafeRoleMemberRoleMemberCreatedServiceServer interface {
	mustEmbedUnimplementedRoleMemberRoleMemberCreatedServiceServer()
}

func RegisterRoleMemberRoleMemberCreatedServiceServer(s grpc.ServiceRegistrar, srv RoleMemberRoleMemberCreatedServiceServer) {
	s.RegisterService(&RoleMemberRoleMemberCreatedService_ServiceDesc, srv)
}

func _RoleMemberRoleMemberCreatedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMemberCreated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMemberRoleMemberCreatedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RoleMemberRoleMemberCreatedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMemberRoleMemberCreatedServiceServer).OnMessage(ctx, req.(*RoleMemberCreated))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleMemberRoleMemberCreatedService_ServiceDesc is the grpc.ServiceDesc for RoleMemberRoleMemberCreatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleMemberRoleMemberCreatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RoleMemberRoleMemberCreatedService",
	HandlerType: (*RoleMemberRoleMemberCreatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RoleMemberRoleMemberCreatedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}

// RoleMemberRoleMemberDeletedServiceClient is the client API for RoleMemberRoleMemberDeletedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleMemberRoleMemberDeletedServiceClient interface {
	OnMessage(ctx context.Context, in *RoleMemberDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleMemberRoleMemberDeletedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleMemberRoleMemberDeletedServiceClient(cc grpc.ClientConnInterface) RoleMemberRoleMemberDeletedServiceClient {
	return &roleMemberRoleMemberDeletedServiceClient{cc}
}

func (c *roleMemberRoleMemberDeletedServiceClient) OnMessage(ctx context.Context, in *RoleMemberDeleted, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/accelbyte.iam.rbac.v1.RoleMemberRoleMemberDeletedService/OnMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleMemberRoleMemberDeletedServiceServer is the server API for RoleMemberRoleMemberDeletedService service.
// All implementations must embed UnimplementedRoleMemberRoleMemberDeletedServiceServer
// for forward compatibility
type RoleMemberRoleMemberDeletedServiceServer interface {
	OnMessage(context.Context, *RoleMemberDeleted) (*emptypb.Empty, error)
	mustEmbedUnimplementedRoleMemberRoleMemberDeletedServiceServer()
}

// UnimplementedRoleMemberRoleMemberDeletedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleMemberRoleMemberDeletedServiceServer struct {
}

func (UnimplementedRoleMemberRoleMemberDeletedServiceServer) OnMessage(context.Context, *RoleMemberDeleted) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedRoleMemberRoleMemberDeletedServiceServer) mustEmbedUnimplementedRoleMemberRoleMemberDeletedServiceServer() {
}

// UnsafeRoleMemberRoleMemberDeletedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleMemberRoleMemberDeletedServiceServer will
// result in compilation errors.
type UnsafeRoleMemberRoleMemberDeletedServiceServer interface {
	mustEmbedUnimplementedRoleMemberRoleMemberDeletedServiceServer()
}

func RegisterRoleMemberRoleMemberDeletedServiceServer(s grpc.ServiceRegistrar, srv RoleMemberRoleMemberDeletedServiceServer) {
	s.RegisterService(&RoleMemberRoleMemberDeletedService_ServiceDesc, srv)
}

func _RoleMemberRoleMemberDeletedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMemberDeleted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleMemberRoleMemberDeletedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/accelbyte.iam.rbac.v1.RoleMemberRoleMemberDeletedService/OnMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleMemberRoleMemberDeletedServiceServer).OnMessage(ctx, req.(*RoleMemberDeleted))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleMemberRoleMemberDeletedService_ServiceDesc is the grpc.ServiceDesc for RoleMemberRoleMemberDeletedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleMemberRoleMemberDeletedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.rbac.v1.RoleMemberRoleMemberDeletedService",
	HandlerType: (*RoleMemberRoleMemberDeletedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _RoleMemberRoleMemberDeletedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/rbac/v1/rbac.proto",
}
