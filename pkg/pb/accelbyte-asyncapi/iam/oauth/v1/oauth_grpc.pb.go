// Copyright (c) 2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// source: IAM/AsyncAPI/oauth.yaml (0.1.0)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: accelbyte-asyncapi/iam/oauth/v1/oauth.proto

package oauth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OauthRequestOauthRequestAuthorizedService_OnMessage_FullMethodName = "/accelbyte.iam.oauth.v1.OauthRequestOauthRequestAuthorizedService/OnMessage"
)

// OauthRequestOauthRequestAuthorizedServiceClient is the client API for OauthRequestOauthRequestAuthorizedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthRequestOauthRequestAuthorizedServiceClient interface {
	OnMessage(ctx context.Context, in *OauthRequestAuthorized, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oauthRequestOauthRequestAuthorizedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthRequestOauthRequestAuthorizedServiceClient(cc grpc.ClientConnInterface) OauthRequestOauthRequestAuthorizedServiceClient {
	return &oauthRequestOauthRequestAuthorizedServiceClient{cc}
}

func (c *oauthRequestOauthRequestAuthorizedServiceClient) OnMessage(ctx context.Context, in *OauthRequestAuthorized, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OauthRequestOauthRequestAuthorizedService_OnMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthRequestOauthRequestAuthorizedServiceServer is the server API for OauthRequestOauthRequestAuthorizedService service.
// All implementations must embed UnimplementedOauthRequestOauthRequestAuthorizedServiceServer
// for forward compatibility
type OauthRequestOauthRequestAuthorizedServiceServer interface {
	OnMessage(context.Context, *OauthRequestAuthorized) (*emptypb.Empty, error)
	mustEmbedUnimplementedOauthRequestOauthRequestAuthorizedServiceServer()
}

// UnimplementedOauthRequestOauthRequestAuthorizedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOauthRequestOauthRequestAuthorizedServiceServer struct {
}

func (UnimplementedOauthRequestOauthRequestAuthorizedServiceServer) OnMessage(context.Context, *OauthRequestAuthorized) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedOauthRequestOauthRequestAuthorizedServiceServer) mustEmbedUnimplementedOauthRequestOauthRequestAuthorizedServiceServer() {
}

// UnsafeOauthRequestOauthRequestAuthorizedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthRequestOauthRequestAuthorizedServiceServer will
// result in compilation errors.
type UnsafeOauthRequestOauthRequestAuthorizedServiceServer interface {
	mustEmbedUnimplementedOauthRequestOauthRequestAuthorizedServiceServer()
}

func RegisterOauthRequestOauthRequestAuthorizedServiceServer(s grpc.ServiceRegistrar, srv OauthRequestOauthRequestAuthorizedServiceServer) {
	s.RegisterService(&OauthRequestOauthRequestAuthorizedService_ServiceDesc, srv)
}

func _OauthRequestOauthRequestAuthorizedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthRequestAuthorized)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthRequestOauthRequestAuthorizedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthRequestOauthRequestAuthorizedService_OnMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthRequestOauthRequestAuthorizedServiceServer).OnMessage(ctx, req.(*OauthRequestAuthorized))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthRequestOauthRequestAuthorizedService_ServiceDesc is the grpc.ServiceDesc for OauthRequestOauthRequestAuthorizedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthRequestOauthRequestAuthorizedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.oauth.v1.OauthRequestOauthRequestAuthorizedService",
	HandlerType: (*OauthRequestOauthRequestAuthorizedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _OauthRequestOauthRequestAuthorizedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/oauth/v1/oauth.proto",
}

const (
	OauthTokenOauthTokenGeneratedService_OnMessage_FullMethodName = "/accelbyte.iam.oauth.v1.OauthTokenOauthTokenGeneratedService/OnMessage"
)

// OauthTokenOauthTokenGeneratedServiceClient is the client API for OauthTokenOauthTokenGeneratedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthTokenOauthTokenGeneratedServiceClient interface {
	OnMessage(ctx context.Context, in *OauthTokenGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oauthTokenOauthTokenGeneratedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthTokenOauthTokenGeneratedServiceClient(cc grpc.ClientConnInterface) OauthTokenOauthTokenGeneratedServiceClient {
	return &oauthTokenOauthTokenGeneratedServiceClient{cc}
}

func (c *oauthTokenOauthTokenGeneratedServiceClient) OnMessage(ctx context.Context, in *OauthTokenGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OauthTokenOauthTokenGeneratedService_OnMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthTokenOauthTokenGeneratedServiceServer is the server API for OauthTokenOauthTokenGeneratedService service.
// All implementations must embed UnimplementedOauthTokenOauthTokenGeneratedServiceServer
// for forward compatibility
type OauthTokenOauthTokenGeneratedServiceServer interface {
	OnMessage(context.Context, *OauthTokenGenerated) (*emptypb.Empty, error)
	mustEmbedUnimplementedOauthTokenOauthTokenGeneratedServiceServer()
}

// UnimplementedOauthTokenOauthTokenGeneratedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOauthTokenOauthTokenGeneratedServiceServer struct {
}

func (UnimplementedOauthTokenOauthTokenGeneratedServiceServer) OnMessage(context.Context, *OauthTokenGenerated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedOauthTokenOauthTokenGeneratedServiceServer) mustEmbedUnimplementedOauthTokenOauthTokenGeneratedServiceServer() {
}

// UnsafeOauthTokenOauthTokenGeneratedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthTokenOauthTokenGeneratedServiceServer will
// result in compilation errors.
type UnsafeOauthTokenOauthTokenGeneratedServiceServer interface {
	mustEmbedUnimplementedOauthTokenOauthTokenGeneratedServiceServer()
}

func RegisterOauthTokenOauthTokenGeneratedServiceServer(s grpc.ServiceRegistrar, srv OauthTokenOauthTokenGeneratedServiceServer) {
	s.RegisterService(&OauthTokenOauthTokenGeneratedService_ServiceDesc, srv)
}

func _OauthTokenOauthTokenGeneratedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthTokenGenerated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthTokenOauthTokenGeneratedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthTokenOauthTokenGeneratedService_OnMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthTokenOauthTokenGeneratedServiceServer).OnMessage(ctx, req.(*OauthTokenGenerated))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthTokenOauthTokenGeneratedService_ServiceDesc is the grpc.ServiceDesc for OauthTokenOauthTokenGeneratedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthTokenOauthTokenGeneratedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.oauth.v1.OauthTokenOauthTokenGeneratedService",
	HandlerType: (*OauthTokenOauthTokenGeneratedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _OauthTokenOauthTokenGeneratedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/oauth/v1/oauth.proto",
}

const (
	OauthTokenOauthTokenRevokedService_OnMessage_FullMethodName = "/accelbyte.iam.oauth.v1.OauthTokenOauthTokenRevokedService/OnMessage"
)

// OauthTokenOauthTokenRevokedServiceClient is the client API for OauthTokenOauthTokenRevokedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthTokenOauthTokenRevokedServiceClient interface {
	OnMessage(ctx context.Context, in *OauthTokenRevoked, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oauthTokenOauthTokenRevokedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthTokenOauthTokenRevokedServiceClient(cc grpc.ClientConnInterface) OauthTokenOauthTokenRevokedServiceClient {
	return &oauthTokenOauthTokenRevokedServiceClient{cc}
}

func (c *oauthTokenOauthTokenRevokedServiceClient) OnMessage(ctx context.Context, in *OauthTokenRevoked, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OauthTokenOauthTokenRevokedService_OnMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthTokenOauthTokenRevokedServiceServer is the server API for OauthTokenOauthTokenRevokedService service.
// All implementations must embed UnimplementedOauthTokenOauthTokenRevokedServiceServer
// for forward compatibility
type OauthTokenOauthTokenRevokedServiceServer interface {
	OnMessage(context.Context, *OauthTokenRevoked) (*emptypb.Empty, error)
	mustEmbedUnimplementedOauthTokenOauthTokenRevokedServiceServer()
}

// UnimplementedOauthTokenOauthTokenRevokedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOauthTokenOauthTokenRevokedServiceServer struct {
}

func (UnimplementedOauthTokenOauthTokenRevokedServiceServer) OnMessage(context.Context, *OauthTokenRevoked) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedOauthTokenOauthTokenRevokedServiceServer) mustEmbedUnimplementedOauthTokenOauthTokenRevokedServiceServer() {
}

// UnsafeOauthTokenOauthTokenRevokedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthTokenOauthTokenRevokedServiceServer will
// result in compilation errors.
type UnsafeOauthTokenOauthTokenRevokedServiceServer interface {
	mustEmbedUnimplementedOauthTokenOauthTokenRevokedServiceServer()
}

func RegisterOauthTokenOauthTokenRevokedServiceServer(s grpc.ServiceRegistrar, srv OauthTokenOauthTokenRevokedServiceServer) {
	s.RegisterService(&OauthTokenOauthTokenRevokedService_ServiceDesc, srv)
}

func _OauthTokenOauthTokenRevokedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthTokenRevoked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthTokenOauthTokenRevokedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthTokenOauthTokenRevokedService_OnMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthTokenOauthTokenRevokedServiceServer).OnMessage(ctx, req.(*OauthTokenRevoked))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthTokenOauthTokenRevokedService_ServiceDesc is the grpc.ServiceDesc for OauthTokenOauthTokenRevokedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthTokenOauthTokenRevokedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.oauth.v1.OauthTokenOauthTokenRevokedService",
	HandlerType: (*OauthTokenOauthTokenRevokedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _OauthTokenOauthTokenRevokedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/oauth/v1/oauth.proto",
}

const (
	OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_OnMessage_FullMethodName = "/accelbyte.iam.oauth.v1.OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService/OnMessage"
)

// OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceClient is the client API for OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceClient interface {
	OnMessage(ctx context.Context, in *OauthThirdPartyRequestAuthorized, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceClient(cc grpc.ClientConnInterface) OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceClient {
	return &oauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceClient{cc}
}

func (c *oauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceClient) OnMessage(ctx context.Context, in *OauthThirdPartyRequestAuthorized, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_OnMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer is the server API for OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService service.
// All implementations must embed UnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer
// for forward compatibility
type OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer interface {
	OnMessage(context.Context, *OauthThirdPartyRequestAuthorized) (*emptypb.Empty, error)
	mustEmbedUnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer()
}

// UnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer struct {
}

func (UnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer) OnMessage(context.Context, *OauthThirdPartyRequestAuthorized) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer) mustEmbedUnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer() {
}

// UnsafeOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer will
// result in compilation errors.
type UnsafeOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer interface {
	mustEmbedUnimplementedOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer()
}

func RegisterOauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer(s grpc.ServiceRegistrar, srv OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer) {
	s.RegisterService(&OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_ServiceDesc, srv)
}

func _OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthThirdPartyRequestAuthorized)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_OnMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer).OnMessage(ctx, req.(*OauthThirdPartyRequestAuthorized))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_ServiceDesc is the grpc.ServiceDesc for OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.oauth.v1.OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService",
	HandlerType: (*OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _OauthThirdPartyRequestOauthThirdPartyRequestAuthorizedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/oauth/v1/oauth.proto",
}

const (
	OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_OnMessage_FullMethodName = "/accelbyte.iam.oauth.v1.OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService/OnMessage"
)

// OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceClient is the client API for OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceClient interface {
	OnMessage(ctx context.Context, in *OauthThirdPartyTokenGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type oauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceClient(cc grpc.ClientConnInterface) OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceClient {
	return &oauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceClient{cc}
}

func (c *oauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceClient) OnMessage(ctx context.Context, in *OauthThirdPartyTokenGenerated, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_OnMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer is the server API for OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService service.
// All implementations must embed UnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer
// for forward compatibility
type OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer interface {
	OnMessage(context.Context, *OauthThirdPartyTokenGenerated) (*emptypb.Empty, error)
	mustEmbedUnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer()
}

// UnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer struct {
}

func (UnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer) OnMessage(context.Context, *OauthThirdPartyTokenGenerated) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMessage not implemented")
}
func (UnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer) mustEmbedUnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer() {
}

// UnsafeOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer will
// result in compilation errors.
type UnsafeOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer interface {
	mustEmbedUnimplementedOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer()
}

func RegisterOauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer(s grpc.ServiceRegistrar, srv OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer) {
	s.RegisterService(&OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_ServiceDesc, srv)
}

func _OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_OnMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthThirdPartyTokenGenerated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer).OnMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_OnMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer).OnMessage(ctx, req.(*OauthThirdPartyTokenGenerated))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_ServiceDesc is the grpc.ServiceDesc for OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "accelbyte.iam.oauth.v1.OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService",
	HandlerType: (*OauthThirdPartyTokenOauthThirdPartyTokenGeneratedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMessage",
			Handler:    _OauthThirdPartyTokenOauthThirdPartyTokenGeneratedService_OnMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accelbyte-asyncapi/iam/oauth/v1/oauth.proto",
}
